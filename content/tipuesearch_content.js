var tipuesearch = {"pages": [{'title': 'About', 'text': 'cmsite: wcms use  https://github.com/mdecycu/cmsimde  as submodule \n', 'tags': '', 'url': 'About.html'}, {'title': 'HW', 'text': '', 'tags': '', 'url': 'HW.html'}, {'title': 'w15-3(更新版)', 'text': '作業 \n 將綠色方塊從繞圈變成從 (1, 1) 出發, 向右行走至 (8, 1) 之後, 轉向下行走, 至底部之後向右行走至右方邊界 (15, 15) 之後, 轉而向上行走至 (15, 8) 之後向左走至左邊界後向上行走至 (1, 1) 後, 依照上述路徑重複執行. \n 更改此處nowx為x方向，nowy為y軸 \n step就是方塊往哪個方向前行步驟(大致想法)為，依照你給的步驟，讓方塊到哪個位置 \n # 繞8字走 def walk(): \xa0\xa0\xa0 global stepx, stepy \xa0\xa0\xa0 if nowx == 1 and nowy == 1: \xa0\xa0\xa0\xa0\xa0\xa0\xa0 stepx = 1 \xa0\xa0\xa0\xa0\xa0\xa0\xa0 stepy = 0 \xa0\xa0\xa0 elif nowx == 8 and nowy == 1: \xa0\xa0\xa0\xa0\xa0\xa0\xa0 stepx = 0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0 stepy = 1 \xa0\xa0\xa0 elif nowx == 8 and nowy == 15: \xa0\xa0\xa0\xa0\xa0\xa0\xa0 stepx = 1 \xa0\xa0\xa0\xa0\xa0\xa0\xa0 stepy = 0 \xa0\xa0 \xa0 \xa0\xa0\xa0 elif nowx ==15 and nowy ==15: \xa0\xa0\xa0\xa0\xa0\xa0\xa0 stepx = 0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0 stepy = -1 \xa0\xa0\xa0 elif nowx ==15 and nowy ==8: \xa0\xa0\xa0\xa0\xa0\xa0\xa0 stepx = -1 \xa0\xa0\xa0\xa0\xa0\xa0\xa0 stepy = 0 \xa0\xa0\xa0 elif nowx ==1 and nowy ==8: \xa0\xa0\xa0\xa0\xa0\xa0\xa0 stepx = 0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0 stepy = -1', 'tags': '', 'url': 'w15-3(更新版).html'}, {'title': 'w5', 'text': '第五周重點  雲端動態網站平台分為 Replit 與 stud.cycu.org.而近端則可使用 localhost 加上SSH 設定教行動態網站，改版後以 acp.bat 推送至 Github 靜態網頁倉儲。  近端使用 localhost 執行個人育儲動裝網站時（啟用可措Python 時，碓認己經設定 GIT_ SSH 變數.且與 plinkexe 對應)：  1.利用 git config--global http.proxy  http://p42.gycu.org ：3128-，設定議 git 指令使用 Proxy連線到  github.com  2.利用 git config-global user.name“使用者 Github 帳號，設定 git 提交所使用的 user.name  了.利用 git confg-global user.email “使用者 Github 帳號設定時所填入的emair，設定提交者  身分(定要設定正確，否則提交無法正確註記）  4. 利用 puttygen.exe 建立 public key 與private key, public key 送到 Github. private key 存人  USB 隨身碟  5.利用 putty.exe 設定 session (名稱可自取），代表以 ssh 連線至  github.com ，設定http 協定之  Proxy，給定 private key 位置，日設定完成之.reg 從registry 匯出存人 USB 随身碟，之後可叹直接雙點擊後完成 putty session 的登錄檔設定．(session 設定完成要 connect 確定可以連線）  6. 使用 git done -recurse-submodules git@your_github_session:mdeqp2022/siteyour github.accountgit 在 site your_ github_account 目錄中取下個人自儲資料  7.cd 至個人自儲目錄 以cms 執行動態網站，並以 init.py 中的 site_ttle 作為網站標題dynamic port 以及 static.port 作為動態網站奥靜態模奏網站的埠號  8号習如何在 bttps/Aocalhast9443 或其他設定在 init.py 中的 dynamicport 埠號铜站中绶輯  绸頁內容.  9.完成動怎網站的階段性给報後 以 generate pages將站轉為靜態資料後，在官儲根目錄中執行 aqp“提交說明字串”後 即可憑藉 SSH的設定精改版容提交推送到 Github 個人官儲區 \n W5 將一步生議學員完成上近實習内容後 再設法運用  stud.oyau.org  上的動慈铜站進行改版.  另外，在個人倉运對應網站上執行的 Brython 程式練習後 可以將程式存人  個人 Github帳號下的  Gist 區街 導入個人的動態或靜態網頁中執行。  Cp抽點 << Previous Next >>w6', 'tags': '', 'url': 'w5.html'}, {'title': 'w15-2', 'text': '綠色方塊行走程式 \n 下面的是原版方塊行走繞圈的程式 \n # 這個程式用於 demo 綠色方塊沿著特定網格路徑行走\n# 從 Brython 程式庫中的 browser 模組導入 document 類別, 並以簡寫設定為 doc\nfrom browser import document as doc\n# 從 browser 模組導入 html 類別, 主要用於建立 CANVAS 標註物件, 並插入頁面中\nfrom browser import html\n# 用於定時執行特定函式\nimport browser.timer\n# 導入亂數模組\nfrom random import random, randint\n\n# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應\ncanvas = html.CANVAS(width = 600, height = 600)\n# 將 canvas 標註的 id 設為 "canvas"\ncanvas.id = "canvas"\n# 將 document 中 id 為 "brython_div" 的標註 \n# 設為與 brython_div 變數對應\nbrython_div = doc["brython_div1"]\n# 將 canvas 標註放入 brython_div1 所在位置\n# 頁面中原本就已經放入 <div id="brython_div"></div> 標註\nbrython_div <= canvas\n# 將頁面中 id 為 canvas 的 CANVAS 設為與 canvas 變數對應\ncanvas = doc["canvas"]\n# 將 canvas 的 2d 繪圖 context 命名為 ctx\nctx = canvas.getContext("2d")\n\n# 建立一個 dRect() 函式\n# s default 為 1, c defaul 為紅色\ndef dRect(lux, luy, w, h, s=1, c=\'#ff0000\'):\n    ctx.lineWidth = s\n    ctx.strokeStyle = c\n    ctx.beginPath();\n    ctx.rect(lux, luy, w, h)\n    ctx.stroke();\n    \n# 建立畫直線函式\ndef draw_line(x1, y1, x2, y2, color="#ff0000"):\n    ctx.beginPath()\n    ctx.moveTo(x1, y1)\n    ctx.lineTo(x2, y2)\n    ctx.strokeStyle = color\n    ctx.stroke()\n\n# 建立 write Text 函式\ndef wText(x, y, t, s=14, c=\'#0000ff\'):\n    ctx.font = str(s) + "px Arial";\n    ctx.fillText(t, x, y)\n\n# 定義畫格線的函式\ndef grid(startx, starty, w, h, wnum, hnum, pixel=1, color="#ff0000"):\n    # 利用迴圈與座標增量繪圖\n    # 因為輸入 wnum 與 hnum 為格子數, 畫格線數則需加上 1\n    for i in range(wnum+1):\n        for j in range(hnum+1):\n            # 畫上下直線\n            yend = starty + h*(hnum)\n            xend = startx + w*(wnum)\n            x = startx + i*w\n            draw_line(x, starty, x, yend, color)\n            # 畫左右直線\n            y = starty + j*h\n            draw_line(startx, y, xend, y, color)\n            #wText(w/2-10, y-w/2, str(j))\n\n# 從兩個座標點求中心點座標\ndef center(lx, ly, rx, ry):\n    # lx is x coord of the left up corner\n    # rx is the x coord of th right down corner\n    x = (lx + rx)/2\n    y = (ly + ry)/2\n    return x, y\n    \n# 畫出填色方塊\ndef draw_rect(gx, gy, gw, gh, color="lime"):\n    # gx is the grid coord at x direction\n    # gy is the grid coord at y direction\n    # gw is the with of the green rect\n    # gh is the height of the green rect\n    lx = origx + (gx-1)*w\n    ly = origy + (gy-1)*h\n    rx = origx + gx*w\n    ry = origy + gy*h\n    cx, cy = center(lx, ly, rx, ry)\n    # glx is the x coord of the left corner\n    # gly is the y coord of the left corner\n    glx = cx - gw/2\n    gly = cy - gh/2\n    # 利用設定的顏色值畫出 rectangle\n    ctx.fillStyle = color\n    ctx.fillRect(glx, gly, gw, gh)\n\n# 以白色覆蓋位於 (nowx, nowy) \n# 且比目標方塊長寬各大於 1 pixel的方塊\ndef wipe():\n    draw_rect(nowx, nowy, 30+1, 30+1, color="white")\n\n# 畫出位於 (nowx, nowy) 的綠色方塊\ndef draw():\n    draw_rect(nowx, nowy, 30, 30, color="lime")\n\n# 繞著外圍行走\ndef walk():\n    global stepx, stepy\n    # 向下\n    if nowy < hnum and nowx == 1:\n        stepx = 0\n        stepy = 1\n    # 向右\n    elif nowx < wnum and nowy == hnum:\n        stepx = 1\n        stepy = 0\n    # 向上\n    elif nowy == hnum and nowx == wnum:\n        stepx = 0\n        stepy = -1\n    # 向左\n    elif nowx == wnum and nowy == 1:\n        stepx = -1\n        stepy = 0\n        \n# 每隔短暫時間即呼叫執行一次的函式\ndef game():\n    # 因 nowx 與 nowy 在函式外宣告\n    # 且在函式內改變對應值, 因此需宣告為 global\n    global nowx, nowy\n    walk()\n    wipe()\n    nowx += stepx\n    nowy += stepy\n    draw()\n\n# 綠色方塊起點座標與 x 及 y 方向的座標增量\nnowx = 1\nnowy = 1\nstepx = 0\nstepy = 0\n# 設定格數\n# width 方向格子數\nwnum = 15\n# height 方向格子數\nhnum = 15\n# 設定線寬\npixel = 1\n# 設定 w 寬度\nw = int(canvas.width/wnum) - pixel\n# 設定 h 高度\nh = int(canvas.height/hnum) - pixel\n# 設定繪圖座標點起點位置\norigx = 1\norigy = 1\n# 利用 grid 函式畫出格線\ngrid(origx, origy, w, h, wnum, hnum, pixel=1, color="black")\n\n\'\'\'\n# 利用 draw_rect 以 grid 座標畫出正方形, 內建為 lime\ndraw_rect(3, 3, 30, 30)\n\n# 利用隨機亂數產生五個紅色方塊\n# wnum 與 hnum 為 x 與 y 方向的格子個數\n# w 與 h 方向上的方塊 pixel 數\nwrect_size = 30\nhrect_size = 30\n# 利用 for 迴圈產生五個紅色方塊\nfor i in range(5):\n    xcoord = randint(1, wnum)\n    ycoord = randint(1, hnum)\n    draw_rect(xcoord, ycoord, wrect_size, hrect_size, color="red")\n\'\'\'\nbrowser.timer.set_interval(game, 100) \n', 'tags': '', 'url': 'w15-2.html'}, {'title': 'W15(H2)', 'text': '\n 為何學習計算機程式需要建立個人倉儲? \n A:能記錄每次更改內容 \n 全球資訊網能夠提供甚麼功能或有什麼優點? \n A:透過網際網路存取，能夠使文字超連結(直接連接到你要的地方)不慣是下載.源文獻.定義.其他網路資源，透過超連結就能省去同樣的東西要使用時都要查一次 \n Replit, stud.cycu.org 與 localhost 分別代表甚麼? \n A:replit是線上開發環境\xa0 \xa0 \n \xa0 \xa0\xa0 stud.cycu.org是學校網域 \n \xa0 \xa0\xa0 localhost\xa0 是一個在電腦網路 中用於表示「此電腦」的主機名 。它被用於通過 網路介面，來存取本機執行的服務，並且將會繞過網路介面硬體。 \n https, ssh 到底提供使用者那些功能或優點? \n A:https是提供對網站伺服器的身分認證，保護交換資料的隱私與完整性 \n \xa0 \xa0 ssh是一種加密的網路傅輸協定，可在不安全的網路中為網路服務提供安全的傅輸環境。 \n Brython 與 Python 有甚麼差別? \n A: Brython是瀏覽器版本的python \n 能夠直接在瀏覽器中以 Brython 繪製中華民國國旗, 或模擬綠色方塊在方塊格點中任意移動, 代表甚麼? \n A:表示在網站中能呈現2D的圖形 \n 變數, 字串, 整數, 浮點數, 數列, Tuple, Dictionary, 函式, 重複迴圈, class, 物件導向, 資料庫, 這些名詞對您而言代表甚麼? \n A:能提供我的程式考慮到更多東西，使我在運用時更加精確，更加接近我們理想中所要呈現的樣子 \n \n', 'tags': '', 'url': 'W15(H2).html'}, {'title': 'w13', 'text': '溫度轉換器 \n \'\'\'\nf = c*9/5+32\nc = (f-32)*5/9\n\'\'\'\nc = input("請輸入溫度")\n#print(type(c))\nc = float(c)\nprint(c, c*9/5+32) \n 溫度轉換器修改版 \n \'\'\'\nf = c*9/5+32\nc = (f-32)*5/9\n\'\'\'\nc = input("請輸入溫度")\n#print(type(c))\nc = float(c)\nprint("你輸入的攝氏溫度"+str(c),"等於華氏溫度"+str(c, c*9/5+32)) \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w12', 'text': 'hw 第一個作業 \n # Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回\nuser_input_temp = input("請輸入攝氏溫度值:")\n# 接著列出 user_input_temp 變數的資料型別\nprint(type(user_input_temp)) \n hw 第二個作業 \n # Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回\nuser_input_temp = input("請輸入攝氏溫度值:")\n# 接著列出 user_input_temp 變數的資料型別\nprint(type(user_input_temp))\n# 到這裡已知利用 input() 函式將傳回字串, 接著以 float() 將字串轉為浮點數\nuser_input_temp = float(user_input_temp)\n# 因為攝氏溫度乘上 9/5 之後再加上 32 就可以得到對應的華氏溫度值\nFahrenheit = (user_input_temp*9/5) + 32\n# 到這裡, Fahrenheit 資料型別為浮點數, 而 user_input_temp 在第 8 行也轉為浮點數\n# 要將兩個浮點數與字串相加, 都必須透過 str() 轉為字串\nprint("攝氏 " + str(user_input_temp) + " 度, 等於華氏 " + str(Fahrenheit) + " 度.") \n \n \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w12-1', 'text': '\n \n  以下事先在頁面中加入 id="brython_div" 的 div 標註\n之後可利用 Brython 的 document 模組與此 html 標註對應\n \n  利用 html 建立一個 id="btn1" 的按鈕  \n 取使用者輸入 \n \n \n \n \n \n', 'tags': '', 'url': 'w12-1.html'}, {'title': 'W6-2', 'text': '擷取個人靜態網頁 \n 在動態的網址上加上變數(?src=)再放上(抽點網站 的 python語言)所轉換的連結就能夠在動態顯示W6-1抽點網站 \n 後面再加上(&src2)再放上( 擷取個人靜態網頁的 python語言)所轉換的連結就能夠在動態顯示 \n 連結在此 \n (https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/035d6948a233beceba7a7974eef0a0a4ef9c17e9/cp2022_w6b_gen_pages_link.py) \n from browser import document, html\n\nbrython_div1 = document["brython_div1"]\n"""\nbrython_div1 <= html.BUTTON("hello")\nbrython_div1 <= html.BR()\nbrython_div1 <= html.A("google", href="https://google.com")\n"""\n\nurl = "https://mde.tw/studlist/2022fall/1b.txt"\ndata = open(url).read().split("\\n")\nmdecp2022 = "https://mdecp2022.github.io/site-"\ndata = data[1:-1]\nfor i in data:\n    stud = i.split("\\t")\n    stud_num = stud[0]\n    github_acc = stud[1]\n    #print(stud_num, github_acc)\n    if github_acc == "":\n        github_acc = stud_num\n    site = mdecp2022 + github_acc\n    link = html.A(stud_num, href=site)\n    brython_div1 <= link\n    brython_div1 <= html.BR() \n \n \n', 'tags': '', 'url': 'W6-2.html'}, {'title': 'w6-1', 'text': '抽點程式 \xa0 \xa0一次抽五位同學 \n 在動態的網址上加上變數(?src=)再放上python所轉換的連結就能夠在動態顯示抽點網站了 \n 連結在此 \n ( https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/035d6948a233beceba7a7974eef0a0a4ef9c17e9/cp1b_2022_random_draw.py) \n # Python 的註解分為單行註解與多行, 單行註解可在字串前方放入 #\n\'\'\'多行註解則可以透過三個單引號前後標註字串或文字段落內容, \n也可以使用三個雙引號作為多行註解的標註\n\'\'\'\n# 使用 import 導入 random 模組, 隨後就可以直接引用 random 模組的方法\nimport random\ncp1b = "0761"\n# 宣告 url 變數值為字串, 此字串為取得 cp2022 1a 選課成員名單\nurl = "https://nfu.cycu.org/?semester=1111&courseno=" + cp1b + "&column=True"\n# 利用上述已經宣告的 url 變數字串值, 作為 open() 函式的輸入變數, 可以連結至該網站\n# 連接 url 所代表字串的網站後, 再利用 read() 函式讀取該網站的內容, 即可取得 cp2022 1a 的選課成員學號\n# url 所屬的網站, 乃 69 中的一台虛擬主機 8/10ff-0-1-2, 並利用 Get 從教務主機取回課程註冊成員學號\n# 由於所取回的學號以跳行符號隔開, 因此取回的學號資料行, 再利用 split() 函式, 以 \\n 跳行符號分割後\n# 所對應到 data 的資料型別將會是數列\ndata = open(url).read().split("\\n")\n# 經過檢查 data 數列, 發現最後一個 element 為空字串, 因此利用 [:-1] 去掉數列的最後一個元素, -1 代表數列最後一個元素的索引\n#print(data[:-1])\n# 設定一個變數, 與修課成員學號數列對應\nstud = data[:-1]\n# 使用 random 模組中的 shuffle() 函式, 以隨機的方式排列 stud 數列內容\nrandom.shuffle(stud)\n# 設定 num 與 5 對應, 或將 5 整數值存入 num 變數所對應的記憶體位址\nnum = 5\n# 利用 for 重複迴圈與 range() 變數, 列印出 (利用 print() 函式) 已經隨機排列次序的 stud 數列的最前面 num 個學號值\nfor i in range(num):\n    print(stud[i])\n \n \n', 'tags': '', 'url': 'w6-1.html'}, {'title': 'cp2022', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation \n Variables \n Comments \n Numbers \n Strings \n print \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n', 'tags': '', 'url': 'cp2022.html'}, {'title': 'Brython,', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation \n Variables \n Comments \n Numbers \n Strings \n print \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束 ', 'tags': '', 'url': 'Brython,.html'}]};